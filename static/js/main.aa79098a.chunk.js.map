{"version":3,"sources":["logo.svg","components/WeatherCard.js","components/WeatherNow.js","components/MiniWeather.js","components/UpcomingWeather.js","components/WeatherWrapper.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","getIcon","code","concat","WeatherCard","props","timestamp","_getHiAndLowOfDay","timeslots","low","hi","i","length","main","temp_min","temp_max","Math","round","getHiAndLowOfDay","day","hours","_getHiAndLowOfDay2","Object","slicedToArray","react_default","a","createElement","className","dt","Date","getDay","src","midday","weather","icon","getMidDayWeather","height","WeatherNow","_props$weather","description","temp","MiniWeather","time","dt_txt","split","replace","UpcomingWeather","days","timeSlots","todaysSlot","addedSlots","push","toConsumableArray","calcTimeSlotsToAdd","map","slot","components_MiniWeather","key","WeatherWrapper","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","enterKey","event","keyCode","getWeatherData","state","search","getForecasts","allForecasts","forecast","forecasts","dateOnly","setState","handleClick","e","Number","target","name","handleChange","value","document","addEventListener","prevProps","prevState","type","background","includes","toLowerCase","getWeatherBackground","groupId","style","color","location","placeholder","onChange","components_WeatherNow","components_UpcomingWeather","components_WeatherCard","Component","App","mounted","lat","long","cityname","url","_cityname$split","_cityname$split2","city","country","fetch","then","res","json","data","list","gotit","catch","err","alert","_this2","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","components_WeatherWrapper","Boolean","window","hostname","match","ReactDOM","render","src_App_0","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aa79098a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './weathercard.css';\r\nimport WeatherHour from './WeatherHour';\r\n\r\nconst getDayOfWeek = (timestamp) =>{\r\n    const numericDay = new Date(timestamp*1000);\r\n   // console.log(numericDay);\r\n    const days = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];\r\n    let dayOfWeek = days[numericDay.getDay()]\r\n   // console.log(dayOfWeek);\r\n    return dayOfWeek;\r\n}\r\n\r\nconst getHiAndLowOfDay = (timeslots) => {\r\n    //console.log(timeslots);\r\n    let low;\r\n    let hi;\r\n\r\n    for (var i=0; i< timeslots.length; i++){\r\n        if(timeslots[i].main.temp_min < low || !low ){\r\n            low = timeslots[i].main.temp_min;\r\n        }\r\n        if(timeslots[i].main.temp_max > hi || !hi){\r\n            hi = timeslots[i].main.temp_max;\r\n        }\r\n    }\r\n    return [Math.round(low),Math.round(hi)];\r\n}\r\n\r\nconst getMidDayWeather = (day) => {\r\n    let midday = Math.round(day.length/2);\r\n   return getIcon(day[midday].weather[0].icon);\r\n}\r\n\r\nconst getIcon = (code) => {\r\n    return `http://openweathermap.org/img/w/${code}.png`\r\n}\r\n\r\n\r\nconst WeatherCard = (props) => {\r\n    let [low,hi] = getHiAndLowOfDay(props.day.hours);\r\n\r\n    return <div className=\"weather-card\">\r\n        <div className=\"weather-card-item day\">{getDayOfWeek(props.day.hours[0].dt)}</div>\r\n        <div className=\"weather-card-item icon\"><img src={getMidDayWeather(props.day.hours)} height=\"40\" /></div>\r\n        <div className=\"weather-card-item hilow\"> <span>{hi} </span> <span>{low}</span> </div>\r\n        <div className=\"weather-card-item\">  </div>\r\n      \r\n    </div>\r\n}\r\n\r\nexport default WeatherCard;","import React from 'react';\r\nimport './weathernow.css';\r\n\r\n\r\nconst WeatherNow = (props) => {\r\n    const {main,weather} = props.weather;\r\n    return <div className=\"weather-now\">\r\n       <div>{weather[0].description}</div>\r\n        <div className=\"degrees\">{Math.round(main.temp)}Â°</div>\r\n    </div>\r\n}\r\n\r\nexport default WeatherNow;","import React from 'react';\r\nimport './miniweather.css';\r\n\r\nconst timeOnly = (time) => {\r\n    time = time.split(\" \")[1].split(\":\")[0];\r\n    if(time > 12){\r\n        time -=12;\r\n        time += 'PM';\r\n    }\r\n    if(time == 0){\r\n        time = 12;\r\n        time += 'AM';\r\n    }\r\n    else if(time < 12){\r\n        time += 'AM';\r\n    }\r\n    if(time == 12){\r\n        time += 'PM';\r\n    }\r\n    return time.replace(\"0\",\"\");\r\n}\r\n\r\nconst getIcon = (code) => {\r\n    return `http://openweathermap.org/img/w/${code}.png`\r\n}\r\n\r\nconst MiniWeather = (props) => {\r\n    //console.log(props);\r\n    return <div className=\"mini-weather\">\r\n        <div>{timeOnly(props.weather.dt_txt)}</div>\r\n        <div> <img src={getIcon(props.weather.weather[0].icon)} /> </div>\r\n        <div> {Math.round(props.weather.main.temp)}Â° </div>\r\n\r\n        </div>\r\n}\r\n\r\nexport default MiniWeather;\r\n\r\n","import React from 'react';\r\nimport MiniWeather from './MiniWeather';\r\nimport './upcomingweather.css';\r\n\r\nconst calcTimeSlotsToAdd = (timeSlots) => {\r\n\r\n    let todaysSlot = timeSlots[0].hours;\r\n\r\n    let slotsToDisplay = 9\r\n    \r\n    if(todaysSlot.length === slotsToDisplay){\r\n        return todaysSlot;\r\n    }\r\n    else{\r\n        let addedSlots = [];\r\n        for (var i=0; i< (slotsToDisplay - todaysSlot.length); i++){\r\n            addedSlots.push(timeSlots[1].hours[i]);\r\n        }\r\n        return [...todaysSlot, ...addedSlots];\r\n    }\r\n    \r\n}\r\n\r\nconst UpcomingWeather = (props) =>{\r\n    let days = calcTimeSlotsToAdd(props.weather);\r\n   //console.log(days);\r\n    return <div className=\"upcoming-weather\">\r\n        {days.map((slot) => <MiniWeather key={slot.dt} weather={slot} />)}\r\n    </div>\r\n}\r\n\r\nexport default UpcomingWeather;","import React, {Component} from 'react';\r\nimport WeatherCard from './WeatherCard';\r\nimport WeatherNow from './WeatherNow';\r\nimport UpcomingWeather from './UpcomingWeather';\r\nimport './weatherwrapper.css';\r\n\r\nclass WeatherWrapper extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state ={\r\n            search:''\r\n        }\r\n    }\r\n\r\n    enterKey = (event) => {\r\n        if(event.keyCode === 13) {\r\n            this.props.getWeatherData(null,null,this.state.search);\r\n        }\r\n       \r\n    }\r\n\r\n    componentDidMount(){\r\n         document.addEventListener(\"keydown\", this.enterKey, false);\r\n         //this.getForecasts();\r\n    }\r\n\r\n    getForecasts = () =>{\r\n        let allForecasts = this.props.weather.forecast;\r\n        //console.log(allForecasts);\r\n         let forecasts= []; // an array that will contain each days 3 hour forecast for 5 days\r\n         let dt; // most recent date \r\n     \r\n         for (let i=0; i< allForecasts.length; i++){\r\n             let day = this.dateOnly(allForecasts[i].dt_txt);\r\n             \r\n             if(dt !== day){ // check if dt had alread been created\r\n                 dt = day // change the dt to current object date\r\n                 let dayObject = {hours:[]}; // create a day object if need be, otherwise put in most recent object\r\n                 forecasts.push(dayObject); // add the day to the forecasts\r\n             }\r\n             if(day === dt){ // if its the same date, add the hours to the date.\r\n                 forecasts[forecasts.length -1].hours.push(allForecasts[i]); // most recent object place\r\n             }\r\n             \r\n         }\r\n\r\n         this.setState({\r\n            forecasts\r\n         });\r\n    }\r\n\r\n    dateOnly = (time) => {\r\n        time = time.split(\" \");\r\n        return time[0];\r\n    }\r\n\r\n    handleClick = (e) =>{\r\n        this.setState({\r\n            day: this.state.day + Number(e.target.name)\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps,prevState) {\r\n        if (this.props.weather !== prevProps.weather) {\r\n          this.getForecasts();\r\n        }\r\n      }\r\n\r\n      getWeatherBackground(type,time){\r\n        const rainyTypes = ['Thunderstorm','Drizzle','Rain','Atmosphere']; //Snow, Atmosphere, Clear, Clouds\r\n        let background;\r\n        let day;\r\n        if(type){\r\n          if (rainyTypes.includes(type)){\r\n            background = 'Rain';\r\n          }\r\n      \r\n          else{\r\n            background = type;\r\n          }\r\n    \r\n        }\r\n       \r\n        if(time){\r\n          if(time.includes('n')){\r\n            background += ' night'\r\n          }\r\n          else{\r\n            background += ' day'\r\n          }\r\n    \r\n        }\r\n        if(background){\r\n          background = background.toLowerCase();\r\n        }\r\n              \r\n        return background;\r\n      }\r\n\r\n      handleChange = (e) => {\r\n        this.setState({\r\n            search: e.target.value\r\n        })\r\n      }\r\n     \r\n\r\n    render(){\r\n        return <div className={\"weather-wrapper \" + this.getWeatherBackground(this.props.groupId, this.props.icon) }>\r\n            {\r\n                !this.state.forecasts && <div style={{color:\"black\"}}>Allow access to location, to get weather from location, or use the search...</div>\r\n            }\r\n            <div className=\"location-name\"> {this.props.location} </div>\r\n            <input type=\"text\" placeholder=\"ex: England,uk\" value={this.state.search} onChange={this.handleChange}/>\r\n            {\r\n                this.state.forecasts &&  <WeatherNow weather={this.state.forecasts[0].hours[0]} />\r\n                                          \r\n            }\r\n            {\r\n                this.state.forecasts &&   <UpcomingWeather weather={this.state.forecasts} />\r\n            }\r\n            <div className=\"weather-card-wrapper\">\r\n            {\r\n               this.state.forecasts && this.state.forecasts.map( (day) => <WeatherCard key ={day.hours[0].dt} day={day}/>)\r\n            }\r\n            </div>\r\n            \r\n\r\n            </div>\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default WeatherWrapper;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport WeatherWrapper from './components/WeatherWrapper';\n\nclass App extends Component {\n\n  state = {\n    weather:{},\n    mounted:false\n  };\n\n  componentDidMount(){\n    if (navigator.geolocation && !this.state.mounted){\n      navigator.geolocation.getCurrentPosition((pos) => \n     {\n      let lat = pos.coords.latitude;\n      let long = pos.coords.longitude;\n      let key = 'ff853c451e3b2c454853556df1598d0c'\n\n      this.getWeatherData(lat,long,null);\n    \n\n     }\n    );\n    }\n    \n    this.setState({\n      mounted:true\n    })\n  }\n\n  getWeatherData = (lat,long,cityname) =>{\n    \n    let key = 'ff853c451e3b2c454853556df1598d0c';\n    let url = 'https://api.openweathermap.org/data/2.5/forecast?'\n    if (lat && long){\n      url += `lat=${lat}&lon=${long}&appid=${key}&units=imperial`\n    }\n    else{\n      let [city,country] = cityname.split(\",\");\n      url += `q=${city},${country}&appid=${key}&units=imperial`\n    }\n\n    fetch(url)\n    .then(res => res.json())\n    \n    .then(data => this.setState({\n      weather: {\n        location:data.city.name,\n        country:data.city.country,\n        forecast:data.list\n      },\n      gotit:true,\n      icon: data.list[0].weather[0].icon,\n      groupId: data.list[0].weather[0].main\n    }))\n    .catch(err => alert('Could not get weather for location'));\n  }\n\n  render() {\n    return (\n      <div className='App'> \n      { this.state.mounted && \n      <WeatherWrapper weather={this.state.weather} groupId={this.state.groupId} icon={this.state.icon} location={this.state.weather.location} getWeatherData={this.getWeatherData}/> \n      }\n  </div> \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}